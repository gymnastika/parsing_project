/**
 * Pipeline Orchestrator for GYMNASTIKA Platform
 * Manages the unified parsing pipeline with AI and Apify integration
 */

class PipelineOrchestrator {
    constructor() {
        // Use existing global instances instead of creating new ones
        this.openaiClient = window.openaiClient;
        this.apifyClient = window.apifyClient;
        
        if (!this.openaiClient) {
            console.warn('‚ö†Ô∏è OpenAI client not found on window object');
            this.openaiClient = new OpenAIClient();
        }
        
        if (!this.apifyClient) {
            console.warn('‚ö†Ô∏è Apify client not found on window object');
            if (window.ApifyClient) {
                this.apifyClient = new window.ApifyClient();
            } else {
                throw new Error('ApifyClient class not available. Please ensure lib/apify-client.js is loaded.');
            }
        }
        
        this.isRunning = false;
        this.currentProgress = {
            stage: '',
            current: 0,
            total: 0,
            message: ''
        };
        
        // Progress callbacks
        this.onProgressUpdate = null;
        this.onStageComplete = null;
        this.onError = null;
        
        console.log('üèóÔ∏è Pipeline Orchestrator created with clients:', {
            openaiClient: !!this.openaiClient,
            apifyClient: !!this.apifyClient
        });
    }

    /**
     * Execute the complete parsing pipeline
     * @param {Object} params - Pipeline parameters
     * @param {string} params.taskName - Name of the parsing task
     * @param {string} params.searchQuery - Original search query
     * @param {number} params.resultCount - Number of results to return
     * @returns {Promise<Object>} Pipeline results
     */
    async executeSearch(params) {
        if (this.isRunning) {
            throw new Error('Pipeline is already running');
        }

        try {
            this.isRunning = true;
            this.updateProgress('initializing', 0, 6, '–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...');

            const { taskName, searchQuery, resultCount } = params;
            
            console.log('üìä Pipeline parameters:', {
                taskName,
                searchQuery: searchQuery || '(empty)',
                resultCount,
                hasSearchQuery: !!searchQuery
            });
            
            // Validate that clients are ready
            this.validateClients();
            
            // Stage 1: Generate search queries and region metadata
            this.updateProgress('query-generation', 1, 6, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ò–ò...');
            const queryData = await this.generateSearchQueries(searchQuery);
            
            // Stage 2: Execute parallel Apify searches
            this.updateProgress('apify-search', 2, 6, '–ü–æ–∏—Å–∫ –≤ Google Maps —á–µ—Ä–µ–∑ Apify...');
            const searchResults = await this.executeApifySearches(queryData, resultCount);
            
            // Stage 3: Aggregate and deduplicate results
            this.updateProgress('aggregation', 3, 6, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
            const aggregatedResults = await this.aggregateResults(searchResults);
            console.log(`üîó –ü–ï–†–ï–•–û–î: –°—ã—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ${searchResults.length} ‚Üí –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ${aggregatedResults.length}`);
            
            // Stage 4: Web scraping for detailed organization information (MOVED BEFORE validation)
            this.updateProgress('web-scraping', 4, 6, `–°–∫—Ä–∞–ø–∏–Ω–≥ ${aggregatedResults.length} –≤–µ–±-—Å–∞–π—Ç–æ–≤...`);
            const detailedResults = await this.scrapeOrganizationDetails(aggregatedResults);
            console.log(`üîó –ü–ï–†–ï–•–û–î: –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ${aggregatedResults.length} ‚Üí –°–∫—Ä–∞–ø–ª–µ–Ω–Ω—ã—Ö ${detailedResults.length}`);
            
            // Stage 5: Filter results with contact info (email OR phone, NO AI validation)
            this.updateProgress('filtering', 5, 7, `–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ${detailedResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º (email/—Ç–µ–ª–µ—Ñ–æ–Ω)...`);
            const resultsWithContact = this.filterResultsWithEmail(detailedResults);
            console.log(`üîó –ü–ï–†–ï–•–û–î: –°–∫—Ä–∞–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ${detailedResults.length} ‚Üí –° –ö–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ ${resultsWithContact.length}`);
            
            // Stage 6: ‚úÖ –ù–û–í–´–ô –≠–¢–ê–ü - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            this.updateProgress('relevance', 6, 7, `–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ${resultsWithContact.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏...`);
            const relevantResults = this.filterByRelevance(resultsWithContact, searchQuery, resultCount);
            console.log(`üîó –ü–ï–†–ï–•–û–î: –° –ö–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ ${resultsWithContact.length} ‚Üí –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö ${relevantResults.length}`);
            
            // Stage 7: Finalize and format
            this.updateProgress('complete', 7, 7, `–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ ${relevantResults.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π`);
            // Format query info for display
            const queryInfo = Array.isArray(queryData) ? 
                {
                    queries: queryData.flatMap(obj => obj.queries),
                    languages: [...new Set(queryData.map(obj => obj.language))],
                    regions: [...new Set(queryData.map(obj => obj.region))]
                } : 
                {
                    queries: queryData.queries,
                    languages: [queryData.language],
                    regions: [queryData.region]
                };
            
            const finalResults = {
                success: true,
                taskName,
                originalQuery: searchQuery,
                generatedQueries: queryInfo.queries,
                languages: queryInfo.languages,
                regions: queryInfo.regions,
                totalFound: aggregatedResults.length,
                validatedCount: relevantResults.length, // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º relevantResults –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                scrapedCount: detailedResults.length,
                finalCount: relevantResults.length, // ‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                results: relevantResults, // ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ email –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                validationSummary: `–ù–∞–π–¥–µ–Ω–æ ${relevantResults.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∏–∑ ${detailedResults.length} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)`, // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                timestamp: new Date().toISOString()
            };

            // Save to local history
            this.saveToHistory(finalResults);
            
            // üíæ Save to Supabase database
            try {
                // üîç ENHANCED DEBUG: Check database client state
                console.log('üîç DEBUG: Database client state check:', {
                    'window.gymnastikaDB exists': !!window.gymnastikaDB,
                    'window.gymnastikaDB.isInitialized': window.gymnastikaDB?.isInitialized,
                    'window.gymnastikaDB.isReady()': window.gymnastikaDB?.isReady ? window.gymnastikaDB.isReady() : 'method not available',
                    'window.gymnastikaDB.getStatus()': window.gymnastikaDB?.getStatus ? window.gymnastikaDB.getStatus() : 'method not available',
                    'window.SupabaseClient exists': !!window.SupabaseClient,
                    'window.SupabaseClient === window.gymnastikaDB': window.SupabaseClient === window.gymnastikaDB
                });
                
                // üîß ENHANCED FIX: Try to initialize database if not already initialized
                if (window.gymnastikaDB && !window.gymnastikaDB.isInitialized) {
                    console.log('üîÑ Database client exists but not initialized, attempting initialization...');
                    try {
                        await window.gymnastikaDB.initialize();
                        console.log('‚úÖ Database client initialized successfully');
                    } catch (initError) {
                        console.error('‚ùå Failed to initialize database client:', initError);
                    }
                }
                
                if (window.gymnastikaDB && window.gymnastikaDB.isInitialized) {
                    console.log('üíæ Saving parsing results to Supabase database...');
                    
                    const taskData = {
                        taskName,
                        searchQuery
                    };
                    
                    console.log('üíæ Saving to database with taskData:', {
                        taskName: taskData.taskName,
                        searchQuery: taskData.searchQuery || '(empty)',
                        resultsCount: relevantResults.length
                    });
                    
                    const saveResult = await window.gymnastikaDB.saveParsingResults(taskData, relevantResults);
                    console.log(`‚úÖ Successfully saved ${saveResult.count} results to Supabase database`);
                    
                    // Add database save info to final results
                    finalResults.databaseSave = {
                        success: true,
                        count: saveResult.count,
                        message: saveResult.message,
                        savedAt: new Date().toISOString()
                    };
                } else {
                    console.warn('‚ö†Ô∏è Supabase database not initialized - results saved to local storage only');
                    console.warn('üîç DEBUG: Database initialization details:', {
                        'gymnastikaDB exists': !!window.gymnastikaDB,
                        'isInitialized value': window.gymnastikaDB?.isInitialized,
                        'isReady value': window.gymnastikaDB?.isReady ? window.gymnastikaDB.isReady() : 'not available'
                    });
                    finalResults.databaseSave = {
                        success: false,
                        message: 'Database not available - saved locally only'
                    };
                }
            } catch (dbError) {
                console.error('‚ùå Failed to save to Supabase database:', dbError);
                console.error('üîç DEBUG: Database error details:', {
                    errorMessage: dbError.message,
                    errorStack: dbError.stack,
                    databaseState: window.gymnastikaDB?.getStatus ? window.gymnastikaDB.getStatus() : 'getStatus not available'
                });
                finalResults.databaseSave = {
                    success: false,
                    error: dbError.message,
                    message: 'Database save failed - results saved locally only'
                };
            }
            
            this.onStageComplete?.('complete', finalResults);
            return finalResults;

        } catch (error) {
            console.error('Pipeline error:', error);
            this.onError?.(error);
            
            // Return error result instead of throwing
            return {
                success: false,
                error: error.message,
                taskName: params.taskName || 'Unknown Task',
                originalQuery: params.searchQuery || '',
                results: [],
                validationSummary: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`,
                timestamp: new Date().toISOString()
            };
        } finally {
            this.isRunning = false;
        }
    }

    /**
     * Alias method for executeSearch to maintain compatibility with script.js
     * @param {Object} params - Pipeline parameters  
     * @returns {Promise<Object>} Pipeline results
     */
    async executePipeline(params) {
        return await this.executeSearch(params);
    }

    /**
     * Generate search queries using first OpenAI assistant
     */
    async generateSearchQueries(originalQuery) {
        try {
            const response = await this.openaiClient.generateSearchQueries(originalQuery);
            
            // Handle new multi-language format (array of query objects)
            if (Array.isArray(response) && response.length > 0 && response[0].queries) {
                console.log(`üåç Multi-language format: ${response.length} query objects`);
                return response; // Return array of query objects
            }
            
            // Handle legacy single object format
            if (!response.queries || !Array.isArray(response.queries)) {
                throw new Error('Invalid query generation response');
            }
            
            console.log(`üéØ Legacy format: ${response.queries.length} queries`);
            
            return [{
                queries: response.queries,
                language: response.language || 'en',
                region: response.region || 'US'
            }];
        } catch (error) {
            console.error('Query generation failed:', error);
            // Fallback: use original query
            return [{
                queries: [originalQuery],
                language: 'en',
                region: 'US'
            }];
        }
    }

    /**
     * Calculate search buffer based on requested count
     */
    calculateSearchBuffer(requestedCount) {
        // üéØ TESTING: 30 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (30/3=10 per query)
        const fixedBuffer = 30; // TESTING: Reduced from 500 to 30
        
        console.log(`üìä Fixed buffer strategy: ${fixedBuffer} results per query (requested: ${requestedCount})`);
        
        return fixedBuffer;
    }

    /**
     * Execute parallel searches using Apify
     */
    async executeApifySearches(queryDataArray, resultCount) {
        // Handle both new format (array) and legacy format (single object)
        const queryObjects = Array.isArray(queryDataArray) ? queryDataArray : [queryDataArray];
        
        // Calculate total buffer and divide by number of query groups
        const totalBuffer = this.calculateSearchBuffer(resultCount);
        const totalQueries = queryObjects.reduce((sum, obj) => sum + obj.queries.length, 0);
        const resultsPerQuery = Math.max(Math.ceil(totalBuffer / totalQueries), resultCount);
        
        console.log(`üéØ Search strategy: requested ${resultCount}, total buffer ${totalBuffer}, divided by ${totalQueries} queries = ${resultsPerQuery} per query`);
        console.log(`üåç Query objects: ${queryObjects.length} language groups`);
        
        try {
            // ALWAYS PARALLEL EXECUTION - FREE plan logic removed
            console.log(`üöÄ Execution strategy: PARALLEL (PAID plan only mode)`);
            return await this.executeParallelSearches(queryObjects, resultsPerQuery);

        } catch (error) {
            console.error('Apify search failed:', error);
            throw error;
        }
    }

    /**
     * Execute searches in parallel for paid plans
     */
    async executeParallelSearches(queryObjects, resultsPerQuery) {
        console.log(`‚ö° Starting PARALLEL execution of ${queryObjects.length} language groups`);
        
        // Create promises for all language groups with timeout protection
        const languagePromises = queryObjects.map(async (queryObj, groupIndex) => {
            const { queries, language, region } = queryObj;
            const groupResults = [];
            
            console.log(`üåç [${language.toUpperCase()}] Starting ${queries.length} queries for language group ${groupIndex + 1}`);
            
            // Execute queries within each language group sequentially to avoid overwhelming single language endpoint
            for (let i = 0; i < queries.length; i++) {
                const query = queries[i];
                
                // REMOVED: updateProgress spam fix - only show at stage level, not per query
                
                try {
                    console.log(`üîç [${language.toUpperCase()}] Query ${i + 1}/${queries.length}: "${query}"`);
                    
                    // Add timeout wrapper to prevent individual queries from hanging
                    const searchPromise = this.apifyClient.searchGoogleMaps({
                        searchTerms: query,
                        maxItems: resultsPerQuery,
                        language: language,
                        countryCode: region
                    });
                    
                    const timeoutPromise = new Promise((_, reject) => {
                        setTimeout(() => reject(new Error(`Query timeout after 10 minutes`)), 10 * 60 * 1000);
                    });
                    
                    const searchResult = await Promise.race([searchPromise, timeoutPromise]);
                    
                    console.log(`‚úÖ [${language.toUpperCase()}] Query "${query}" returned ${searchResult?.length || 0} results`);
                    
                    if (searchResult && searchResult.length > 0) {
                        groupResults.push(...searchResult);
                    }
                    
                    // Small delay between queries in same language group
                    if (i < queries.length - 1) {
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                    
                } catch (queryError) {
                    console.error(`‚ùå [${language.toUpperCase()}] Query "${query}" failed:`, queryError.message);
                    continue;
                }
            }
            
            console.log(`üèÅ [${language.toUpperCase()}] Language group completed: ${groupResults.length} results`);
            return groupResults;
        });
        
        // Add timeout wrapper for the entire language group processing
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Language groups processing timeout after 15 minutes')), 15 * 60 * 1000);
        });
        
        // Wait for all language groups to complete or timeout - use allSettled to handle partial failures
        console.log(`‚è≥ Waiting for ${queryObjects.length} language groups to complete (max 15min)...`);
        
        let allGroupResults;
        try {
            const groupPromise = Promise.allSettled(languagePromises);
            const raceResult = await Promise.race([groupPromise, timeoutPromise]);
            allGroupResults = raceResult;
        } catch (timeoutError) {
            console.warn('‚ö†Ô∏è Language groups processing timed out, using partial results');
            // Get whatever results are available
            const partialResults = await Promise.allSettled(languagePromises);
            allGroupResults = partialResults;
        }
        
        // Process results from Promise.allSettled - extract successful values and log failures
        const successfulResults = [];
        let failedCount = 0;
        
        allGroupResults.forEach((result, index) => {
            if (result.status === 'fulfilled' && result.value) {
                successfulResults.push(...result.value);
                const language = queryObjects[index]?.language || `group-${index}`;
                console.log(`‚úÖ [${language.toUpperCase()}] Successfully processed: ${result.value.length} results`);
            } else {
                failedCount++;
                const language = queryObjects[index]?.language || `group-${index}`;
                console.error(`‚ùå [${language.toUpperCase()}] Failed:`, result.reason?.message || 'Unknown error');
            }
        });
        
        console.log(`üéâ PARALLEL execution complete: ${successfulResults.length} total results from ${queryObjects.length} language groups`);
        console.log(`üìä Success rate: ${queryObjects.length - failedCount}/${queryObjects.length} language groups succeeded`);
        
        if (failedCount > 0) {
            console.warn(`‚ö†Ô∏è ${failedCount} language groups failed but continuing with ${successfulResults.length} results`);
        }
        
        return successfulResults;
    }

    /**
     * Execute searches sequentially for free plans
     */
    async executeSequentialSearches(queryObjects, resultsPerQuery) {
        console.log(`üêå Starting SEQUENTIAL execution of ${queryObjects.length} language groups`);
        
        const results = [];
        let totalQueries = 0;
        
        // Calculate total queries for progress tracking
        queryObjects.forEach(obj => totalQueries += obj.queries.length);
        
        let currentQueryIndex = 0;
        
        for (const queryObj of queryObjects) {
            const { queries, language, region } = queryObj;
            
            console.log(`üó£Ô∏è Processing ${queries.length} queries in language: ${language}, region: ${region}`);
            
            for (const query of queries) {
                currentQueryIndex++;
                
                // REMOVED: updateProgress spam fix - only show at stage level, not per query
                
                try {
                    console.log(`üîç Executing query ${currentQueryIndex}/${totalQueries}: "${query}" (${language}/${region})`);
                    
                    const searchResult = await this.apifyClient.searchGoogleMaps({
                        searchTerms: query,
                        maxItems: resultsPerQuery,
                        language: language,
                        countryCode: region
                    });
                    
                    console.log(`‚úÖ Query "${query}" returned ${searchResult?.length || 0} results`);
                    
                    if (searchResult && searchResult.length > 0) {
                        results.push(...searchResult);
                    }
                    
                    // Small delay between queries to prevent overload
                    if (currentQueryIndex < totalQueries) {
                        console.log('‚è≥ Waiting 2 seconds before next query...');
                        await new Promise(resolve => setTimeout(resolve, 2000));
                    }
                    
                } catch (queryError) {
                    console.error(`‚ùå Query "${query}" failed:`, queryError.message);
                    
                    // Log the error details for debugging
                    if (queryError.stack) {
                        console.error('Error stack:', queryError.stack);
                    }
                    
                    // Continue with next query instead of failing completely
                    continue;
                }
            }
        }
        
        console.log(`üìä SEQUENTIAL execution complete: ${results.length} results from ${totalQueries} queries`);
        return results;
    }

    /**
     * Aggregate and deduplicate results
     */
    async aggregateResults(searchResults) {
        console.log('='.repeat(80));
        console.log('üìä –≠–¢–ê–ü –ê–ì–†–ï–ì–ê–¶–ò–ò –ò –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –†–ï–ó–£–õ–¨–¢–ê–¢–û–í');
        console.log('='.repeat(80));
        console.log(`üì• –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`);
        console.log(`  - –í—Å–µ–≥–æ —Å—ã—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResults.length}`);
        
        const seen = new Set();
        const uniqueResults = [];
        let duplicatesCount = 0;
        let skippedCount = 0;
        
        console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:`);
        
        for (let i = 0; i < searchResults.length; i++) {
            const result = searchResults[i];
            console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç ${i + 1}/${searchResults.length}:`, {
                title: result?.title || result?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                website: result?.website || '–ë–µ–∑ —Å–∞–π—Ç–∞',
                address: result?.address || '–ë–µ–∑ –∞–¥—Ä–µ—Å–∞',
                phone: result?.phone || '–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
            });
            
            if (!result || !result.website) {
                console.log(`  ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ—Ç website): ${result?.title || result?.name || 'Unknown'}`);
                skippedCount++;
                continue;
            }
            
            const key = result.website.toLowerCase();
            if (!seen.has(key)) {
                seen.add(key);
                const cleanResult = {
                    name: result.title || result.name,
                    website: result.website,
                    address: result.address,
                    description: result.description || null, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ Google Maps –¥–ª—è –ª—É—á—à–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    rating: result.rating,
                    reviews: result.reviewsCount,
                    phone: result.phone,
                    category: result.category
                };
                uniqueResults.push(cleanResult);
                console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π`);
            } else {
                duplicatesCount++;
                console.log(`  üîÑ –î—É–±–ª–∏—Ä—É–µ—Ç: ${key}`);
            }
        }
        
        console.log(`üìä –ò–¢–û–ì–ò –ê–ì–†–ï–ì–ê–¶–ò–ò:`);
        console.log(`  - –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResults.length}`);
        console.log(`  - –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç website): ${skippedCount}`);
        console.log(`  - –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π: ${duplicatesCount}`);
        console.log(`  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${uniqueResults.length}`);
        console.log('='.repeat(80));
        
        return uniqueResults;
    }

    /**
     * Validate results using second OpenAI assistant
     */
    async validateResults(results, originalQuery, resultCount = 10) {
        try {
            console.log('='.repeat(80));
            console.log('üß† –≠–¢–ê–ü –í–ê–õ–ò–î–ê–¶–ò–ò –†–ï–ó–£–õ–¨–¢–ê–¢–û–í');
            console.log('='.repeat(80));
            console.log(`üìä –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`);
            console.log(`  - –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${results.length}`);
            console.log(`  - –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å: "${originalQuery}"`);
            console.log(`  - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${resultCount}`);
            
            if (results.length === 0) {
                console.warn('‚ö†Ô∏è No results to validate');
                return {
                    validResults: [],
                    summary: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
                };
            }
            
            // Send more results to AI but ask for specific count
            const validationLimit = Math.min(results.length, Math.max(30, resultCount * 2));
            
            // üó∫Ô∏è –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const originalDataMap = new Map();
            results.forEach(result => {
                if (result.website) {
                    originalDataMap.set(result.website.toLowerCase(), result);
                }
            });
            console.log(`üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∞ –º–∞–ø–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${originalDataMap.size} –∑–∞–ø–∏—Å–µ–π`);

            const validationData = {
                originalQuery,
                requestedCount: resultCount, // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è AI
                results: results.slice(0, validationLimit)
            };
            
            console.log(`üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`);
            console.log(`  - –ò–º–µ–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
            console.log(`  - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${validationData.results.length} (–ª–∏–º–∏—Ç: ${validationLimit})`);
            console.log(`  - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö: ${resultCount}`);
            
            console.log(`üìã –î–ï–¢–ê–õ–ò –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–ï–†–ï–î –í–ê–õ–ò–î–ê–¶–ò–ï–ô (–ø–µ—Ä–≤—ã–µ 3):`);
            validationData.results.slice(0, 3).forEach((result, index) => {
                console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç ${index + 1}:`, {
                    name: result.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    website: result.website || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    address: result.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    rating: result.rating || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    phone: result.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                });
            });
            
            const validationResult = await this.openaiClient.validateResults(validationData);
            
            console.log(`üì§ –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –û–¢ –í–¢–û–†–û–ì–û –ê–°–°–ò–°–¢–ï–ù–¢–ê:`);
            console.log(`  - –ü–æ–ª—É—á–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${validationResult.validResults?.length || 0}`);
            console.log(`  - –†–µ–∑—é–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationResult.summary || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
            
            // üîÑ –í–°–ï–ì–î–ê –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞–ø—ã (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —Ä–∞–±–æ—Ç–∞–ª –ª–∏ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)
            console.log(`üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•:`);
            if (validationResult.validResults && Array.isArray(validationResult.validResults)) {
                const restoredResults = validationResult.validResults.map((result, index) => {
                    const website = result.website;
                    const originalData = originalDataMap.get(website?.toLowerCase());
                    
                    console.log(`  üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ${index + 1}: ${website}`);
                    
                    if (originalData) {
                        console.log(`  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è: ${originalData.name || website}`);
                        return originalData; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    } else {
                        console.log(`  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è: ${website} (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)`);
                        return result; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    }
                });
                
                validationResult.validResults = restoredResults;
                console.log(`üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: ${restoredResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
                
                // üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –ø–µ—Ä–≤—ã—Ö 3 –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                console.log(`üìã –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–ø–µ—Ä–≤—ã–µ 3):`);
                restoredResults.slice(0, 3).forEach((result, index) => {
                    console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ${index + 1}:`, {
                        name: result.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        website: result.website || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        address: result.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        rating: result.rating || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        phone: result.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    });
                });
            } else {
                console.log(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è`);
            }
            
            // Ensure we don't exceed requested count
            if (validationResult.validResults && validationResult.validResults.length > resultCount) {
                console.log(`‚úÇÔ∏è –û–ë–†–ï–ó–ö–ê: ${validationResult.validResults.length} ‚Üí ${resultCount} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
                validationResult.validResults = validationResult.validResults.slice(0, resultCount);
            }
            
            console.log(`‚úÖ –§–ò–ù–ê–õ –í–ê–õ–ò–î–ê–¶–ò–ò: ${validationResult.validResults?.length || 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–æ—Å—å: ${resultCount})`);
            console.log('='.repeat(80));
            
            return validationResult;
            
        } catch (error) {
            console.error('‚ùå Result validation failed:', error);
            // Return unvalidated results with warning
            return {
                validResults: results,
                summary: `–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`
            };
        }
    }

    // ‚ùå –£–î–ê–õ–ï–ù: validateScrapedResults - –≤—Ç–æ—Ä–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–±—Ä–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
    // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ email –±–µ–∑ AI –≤–∞–ª–∏–¥–∞—Ü–∏–∏

    /**
     * Update progress and notify observers
     */
    updateProgress(stage, current, total, message) {
        this.currentProgress = { stage, current, total, message };
        this.onProgressUpdate?.(this.currentProgress);
    }

    /**
     * Save results to local history
     */
    saveToHistory(results) {
        try {
            const history = JSON.parse(localStorage.getItem('parsing-history') || '[]');
            history.unshift(results);
            
            // Keep only last 100 results
            if (history.length > 100) {
                history.splice(100);
            }
            
            localStorage.setItem('parsing-history', JSON.stringify(history));
        } catch (error) {
            console.error('Failed to save history:', error);
        }
    }

    /**
     * Get parsing history
     */
    getHistory() {
        try {
            return JSON.parse(localStorage.getItem('parsing-history') || '[]');
        } catch (error) {
            console.error('Failed to load history:', error);
            return [];
        }
    }

    /**
     * Cancel running pipeline
     */
    cancel() {
        this.isRunning = false;
        this.updateProgress('cancelled', 0, 5, '–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω');
    }

    /**
     * Validate that all required clients are ready
     */
    validateClients() {
        console.log('üîç Validating pipeline clients...');
        
        // Check OpenAI client
        if (!this.openaiClient || !this.openaiClient.isInitialized()) {
            console.error('‚ùå OpenAI client validation failed');
            console.log('OpenAI client exists:', !!this.openaiClient);
            console.log('OpenAI client status:', this.openaiClient ? this.openaiClient.getStatus() : 'not found');
            throw new Error('OpenAI client not initialized. Please check API key and assistant ID.');
        }
        
        // Check Apify client
        if (!this.apifyClient || !this.apifyClient.isInitialized()) {
            console.error('‚ùå Apify client validation failed');
            console.log('Apify client exists:', !!this.apifyClient);
            console.log('Apify client status:', this.apifyClient ? this.apifyClient.getStatus() : 'not found');
            throw new Error('Apify client not initialized. Please check API token.');
        }
        
        console.log('‚úÖ All pipeline clients validated successfully');
    }

    /**
     * Scrape detailed organization information from validated URLs
     */
    async scrapeOrganizationDetails(validatedResults) {
        try {
            console.log(`üåê Starting organization details scraping for ${validatedResults.length} results...`);
            
            if (!validatedResults || validatedResults.length === 0) {
                console.warn('‚ö†Ô∏è No validated results to scrape');
                return [];
            }
            
            // Extract URLs from validated results (handle different data formats)
            const urls = validatedResults
                .map(result => {
                    // Handle different result formats
                    return result.website || result.url || result.link || null;
                })
                .filter(url => url && typeof url === 'string' && (url.startsWith('http://') || url.startsWith('https://')));
                
            if (urls.length === 0) {
                console.warn('‚ö†Ô∏è No valid URLs found in validated results');
                // Return original results with placeholder scraping data
                return validatedResults.map(result => ({
                    ...result,
                    organizationName: result.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
                    email: null,
                    description: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫',
                    country: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
                    scrapedAt: new Date().toISOString()
                }));
            }
            
            console.log(`üîç Found ${urls.length} valid URLs for scraping`);
            
            // üöÄ –ü–†–Ø–ú–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ URLs –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–±–∞—Ç—á–∏–Ω–≥ —É–±—Ä–∞–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
            console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–≥–æ web scraping –¥–ª—è ${urls.length} URLs...`);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—ä—è–≤–ª—è–µ–º scrapedData –í–ù–ï –±–ª–æ–∫–∞ try/catch
            let scrapedData = [];
            
            try {
                // Perform web scraping for all URLs at once
                scrapedData = await this.apifyClient.scrapeWebsiteDetails(urls);
                
                console.log(`‚úÖ Web scraping –∑–∞–≤–µ—Ä—à–µ–Ω: ${scrapedData.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
                console.log(`  - –° email: ${scrapedData.filter(r => r.email).length}`);
                console.log(`  - –ë–µ–∑ email: ${scrapedData.filter(r => !r.email).length}`);
                
            } catch (scrapingError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ web scraping:`, scrapingError.message);
                
                // –°–æ–∑–¥–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö URL
                scrapedData = urls.map(url => ({
                    url,
                    organizationName: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å',
                    email: null,
                    description: `–û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: ${scrapingError.message}`,
                    country: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
                    scrapingError: scrapingError.message,
                    scrapedAt: new Date().toISOString()
                }));
            }
            
            // Merge original Google Maps data with scraped website details
            const mergedResults = this.mergeGoogleMapsWithWebData(validatedResults, scrapedData);
            
            console.log(`üéØ Final merge completed: ${mergedResults.length} enhanced results`);
            
            return mergedResults;
            
        } catch (error) {
            console.error('‚ùå Organization details scraping failed:', error);
            
            // Return fallback: original results with error indication
            return validatedResults.map(result => ({
                ...result,
                organizationName: result.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
                email: null,
                description: `–û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: ${error.message}`,
                country: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
                scrapingError: error.message,
                scrapedAt: new Date().toISOString()
            }));
        }
    }

    /**
     * Merge Google Maps data with scraped website details
     */
    mergeGoogleMapsWithWebData(googleMapsResults, scrapedData) {
        console.log(`üîÄ Merging ${googleMapsResults.length} Google Maps results with ${scrapedData.length} scraped results`);
        
        return googleMapsResults.map(gmResult => {
            // Find matching scraped data by URL
            const gmUrl = gmResult.website || gmResult.url || gmResult.link;
            const matchingScrapedData = scrapedData.find(scraped => {
                const scrapedUrl = scraped.url || scraped.website;
                return scrapedUrl === gmUrl;
            });
            
            if (matchingScrapedData) {
                // Log scraped data for debugging
                console.log(`üîç Scraped data for ${gmResult.name}:`, {
                    title: matchingScrapedData.title,
                    organizationName: matchingScrapedData.organizationName,
                    email: matchingScrapedData.email,
                    url: matchingScrapedData.url,
                    website: matchingScrapedData.website
                });
                
                // Merge data with preference for scraped details
                return {
                    // Google Maps base data
                    name: gmResult.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
                    address: gmResult.address,
                    phone: gmResult.phone,
                    rating: gmResult.rating,
                    reviewsCount: gmResult.reviewsCount,
                    categories: gmResult.categories,
                    coordinates: gmResult.coordinates,
                    openingHours: gmResult.openingHours,
                    googleMapsUrl: gmResult.googleMapsUrl,
                    imageUrl: gmResult.imageUrl,
                    
                    // Enhanced data from web scraping
                    organizationName: matchingScrapedData.title || matchingScrapedData.organizationName || gmResult.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
                    email: matchingScrapedData.email,
                    description: matchingScrapedData.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                    website: matchingScrapedData.website || matchingScrapedData.url || gmUrl,
                    country: matchingScrapedData.country || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
                    allEmails: matchingScrapedData.allEmails || [],
                    
                    // Metadata
                    hasContactInfo: matchingScrapedData.hasContactInfo || false,
                    scrapedAt: matchingScrapedData.scrapedAt,
                    dataSource: 'google_maps_with_web_scraping',
                    scrapingError: matchingScrapedData.scrapingError || null
                };
            } else {
                // No matching scraped data - return Google Maps data with placeholders
                return {
                    // Google Maps base data
                    name: gmResult.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', 
                    address: gmResult.address,
                    phone: gmResult.phone,
                    rating: gmResult.rating,
                    reviewsCount: gmResult.reviewsCount,
                    categories: gmResult.categories,
                    coordinates: gmResult.coordinates,
                    openingHours: gmResult.openingHours,
                    googleMapsUrl: gmResult.googleMapsUrl,
                    imageUrl: gmResult.imageUrl,
                    
                    // Placeholder scraped data
                    organizationName: gmResult.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
                    email: null,
                    description: '–í–µ–±-—Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞',
                    website: gmUrl || null,
                    country: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
                    allEmails: [],
                    
                    // Metadata
                    hasContactInfo: false,
                    scrapedAt: new Date().toISOString(),
                    dataSource: 'google_maps_only',
                    scrapingError: 'URL –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                };
            }
        });
    }

    /**
     * Filter results to include those with contact info (email OR phone)
     */
    filterResultsWithEmail(results) {
        console.log('='.repeat(80));
        console.log('üìßüìû –≠–¢–ê–ü –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –ö–û–ù–¢–ê–ö–¢–ù–´–ú –î–ê–ù–ù–´–ú (EMAIL + –¢–ï–õ–ï–§–û–ù)');
        console.log('='.repeat(80));
        
        if (!Array.isArray(results) || results.length === 0) {
            console.warn('‚ö†Ô∏è No results to filter for contact info');
            return [];
        }
        
        console.log(`üì• –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`);
        console.log(`  - –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${results.length}`);
        
        let withEmail = 0;
        let withPhoneOnly = 0;
        let withBoth = 0;
        let withoutContact = 0;
        
        const resultsWithContact = results.filter((result, index) => {
            console.log(`\n–†–µ–∑—É–ª—å—Ç–∞—Ç ${index + 1}/${results.length}: "${result.organizationName || result.name}"`);
            console.log(`  - Email: ${result.email || '–ù–ï–¢'}`);
            console.log(`  - AllEmails: ${result.allEmails?.length || 0} emails`);
            console.log(`  - Phone: ${result.phone || '–ù–ï–¢'}`);
            console.log(`  - Description contains email: ${result.description && /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/.test(result.description) ? '–î–ê' : '–ù–ï–¢'}`);
            
            // Check various email fields
            const hasEmail = result.email || 
                            (result.allEmails && result.allEmails.length > 0) ||
                            // Also check if email might be in description
                            (result.description && /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/.test(result.description));
            
            // Check phone fields  
            const hasPhone = result.phone || result.phoneNumber;
            
            // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–∏–Ω–∏–º–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å email –ò–õ–ò —Ç–µ–ª–µ—Ñ–æ–Ω
            const hasContactInfo = hasEmail || hasPhone;
            
            if (hasEmail && hasPhone) {
                console.log(`  ‚úÖ –ü–†–ò–ù–Ø–¢ - –µ—Å—Ç—å –∏ email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω (–∏–¥–µ–∞–ª—å–Ω–æ!)`);
                withBoth++;
            } else if (hasEmail && !hasPhone) {
                console.log(`  ‚úÖ –ü–†–ò–ù–Ø–¢ - –µ—Å—Ç—å email (–±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)`);
                withEmail++;
            } else if (!hasEmail && hasPhone) {
                console.log(`  ‚úÖ –ü–†–ò–ù–Ø–¢ - –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω (–±–µ–∑ email)`);
                withPhoneOnly++;
            } else {
                console.log(`  ‚ùå –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù - –Ω–µ—Ç –Ω–∏ email –Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞`);
                withoutContact++;
            }
            
            return hasContactInfo;
        });
        
        console.log(`\nüìä –ò–¢–û–ì–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –ö–û–ù–¢–ê–ö–¢–ù–´–ú –î–ê–ù–ù–´–ú:`);
        console.log(`  - –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
        console.log(`  - –° email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${withBoth}`);
        console.log(`  - –¢–æ–ª—å–∫–æ —Å email: ${withEmail}`);
        console.log(`  - –¢–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${withPhoneOnly}`);
        console.log(`  - –í—Å–µ–≥–æ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: ${withBoth + withEmail + withPhoneOnly}`);
        console.log(`  - –ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${withoutContact}`);
        console.log(`  - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${Math.round((withBoth + withEmail + withPhoneOnly)/results.length*100)}%`);
        console.log(`  - –§–ò–ù–ê–õ–¨–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û: ${resultsWithContact.length}`);
        
        // üéØ –£–õ–£–ß–®–ï–ù–ò–ï: –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏, –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        const totalWithContact = withBoth + withEmail + withPhoneOnly;
        if (totalWithContact < 5 && results.length > totalWithContact) {
            console.log(`\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–í–ï–õ–ò–ß–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:`);
            console.log(`  1. –£–ª—É—á—à–∏—Ç—å email/phone extraction –∞–ª–≥–æ—Ä–∏—Ç–º –≤ web scraper`);
            console.log(`  2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞ /contact, /kontakt —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö`);
            console.log(`  3. –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (—Å–µ–π—á–∞—Å: ${results.length})`);
            console.log(`  4. ‚úÖ –í–ö–õ–Æ–ß–ï–ù–´ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏ –±–µ–∑ email'–æ–≤ (–Ω–æ–≤–æ–µ!)`);
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            console.log(`\nüìã –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò –ë–ï–ó –ö–û–ù–¢–ê–ö–¢–û–í (–ø–µ—Ä–≤—ã–µ 3):`);
            const withoutContactResults = results.filter(result => {
                const hasEmail = result.email || 
                                (result.allEmails && result.allEmails.length > 0) ||
                                (result.description && /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/.test(result.description));
                const hasPhone = result.phone || result.phoneNumber;
                return !hasEmail && !hasPhone;
            });
            
            withoutContactResults.slice(0, 3).forEach((result, index) => {
                console.log(`–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ${index + 1}: ${result.organizationName || result.name}`);
                console.log(`  Website: ${result.website}`);
                console.log(`  Address: ${result.address || '–ù–µ—Ç'}`);
            });
        }
        
        console.log('='.repeat(80));
        
        return resultsWithContact;
    }

    /**
     * Filter and sort results by relevance to original query
     * ‚úÖ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
     */
    filterByRelevance(results, originalQuery, requestedCount = null) {
        console.log('='.repeat(80));
        console.log('üéØ –≠–¢–ê–ü –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–ò');
        console.log('='.repeat(80));
        console.log(`üì• –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`);
        console.log(`  - –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
        console.log(`  - –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å: "${originalQuery}"`);
        console.log(`  - –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${requestedCount || '–≤—Å–µ'}`);
        
        if (!Array.isArray(results) || results.length === 0) {
            console.warn('‚ö†Ô∏è No results to filter by relevance');
            return [];
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const keywords = originalQuery.toLowerCase()
            .split(/[,\s]+/)
            .filter(word => word.length > 2)
            .map(word => word.trim());
        
        console.log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:`, keywords);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫ –∫–∞–∂–¥–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        const scoredResults = results.map((result, index) => {
            let score = 0;
            
            // –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            const searchableText = [
                result.name || result.organizationName || '',
                result.description || '',
                result.address || '',
                result.category || ''
            ].join(' ').toLowerCase();
            
            // –ü–æ–¥—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            keywords.forEach(keyword => {
                if (searchableText.includes(keyword)) {
                    score += 10; // +10 –∑–∞ –∫–∞–∂–¥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                }
            });
            
            // –ë–æ–Ω—É—Å—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            if (result.email) score += 20; // +20 –∑–∞ –Ω–∞–ª–∏—á–∏–µ email
            if (result.phone) score += 5; // +5 –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if (result.rating && parseFloat(result.rating) > 4) score += 5; // +5 –∑–∞ –≤—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            if (result.reviewsCount && parseInt(result.reviewsCount) > 10) score += 3; // +3 –∑–∞ –º–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–æ–≤
            if (result.description && result.description.length > 50) score += 2; // +2 –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (index < 5) {
                console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç ${index + 1}: "${result.name}" - –°–∫–æ—Ä: ${score}`);
                console.log(`  - –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: ${keywords.filter(k => searchableText.includes(k)).join(', ')}`);
                console.log(`  - Email: ${result.email ? '–î–ê' : '–ù–ï–¢'}`);
                console.log(`  - –†–µ–π—Ç–∏–Ω–≥: ${result.rating || '–ù–ï–¢'}`);
            }
            
            return { ...result, relevanceScore: score };
        });
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–∫–æ—Ä–∞)
        scoredResults.sort((a, b) => b.relevanceScore - a.relevanceScore);
        
        console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–û–†–ò–ù–ì–ê:`);
        console.log(`  - –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä: ${Math.round(scoredResults.reduce((sum, r) => sum + r.relevanceScore, 0) / scoredResults.length)}`);
        console.log(`  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä: ${Math.max(...scoredResults.map(r => r.relevanceScore))}`);
        console.log(`  - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä: ${Math.min(...scoredResults.map(r => r.relevanceScore))}`);
        
        // –û–±—Ä–µ–∑–∫–∞ –¥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        const finalResults = requestedCount ? 
            scoredResults.slice(0, requestedCount) : 
            scoredResults;
            
        console.log(`‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: ${finalResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        console.log('='.repeat(80));
        
        return finalResults;
    }

    /**
     * Get current status
     */
    getStatus() {
        return {
            isRunning: this.isRunning,
            progress: this.currentProgress,
            clientsReady: {
                openai: this.openaiClient ? this.openaiClient.isInitialized() : false,
                apify: this.apifyClient ? this.apifyClient.isInitialized() : false
            }
        };
    }
}

// Export for use in other modules
window.PipelineOrchestrator = PipelineOrchestrator;